"use strict";(self.webpackChunk_lilib_utils=self.webpackChunk_lilib_utils||[]).push([[732],{9848:(e,t,n)=>{n.d(t,{Zo:()=>s,kt:()=>h});var a=n(7689);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var m=a.createContext({}),c=function(e){var t=a.useContext(m),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},s=function(e){var t=c(e.components);return a.createElement(m.Provider,{value:t},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,m=e.parentName,s=o(e,["components","mdxType","originalType","parentName"]),p=c(n),u=r,h=p["".concat(m,".").concat(u)]||p[u]||d[u]||i;return n?a.createElement(h,l(l({ref:t},s),{},{components:n})):a.createElement(h,l({ref:t},s))}));function h(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,l=new Array(i);l[0]=u;var o={};for(var m in t)hasOwnProperty.call(t,m)&&(o[m]=t[m]);o.originalType=e,o[p]="string"==typeof e?e:r,l[1]=o;for(var c=2;c<i;c++)l[c]=n[c];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},2878:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>m,contentTitle:()=>l,default:()=>d,frontMatter:()=>i,metadata:()=>o,toc:()=>c});var a=n(1163),r=(n(7689),n(9848));const i={},l=void 0,o={unversionedId:"MemoryCache",id:"MemoryCache",title:"MemoryCache",description:"Cache data in memory. After cacheTime, the data will be automatically deleted.",source:"@site/docs/MemoryCache.md",sourceDirName:".",slug:"/MemoryCache",permalink:"/utils/MemoryCache",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"docs",previous:{title:"isRenderable (React)",permalink:"/utils/isRenderable"},next:{title:"mergeWithDefined",permalink:"/utils/mergeWithDefined"}},m={},c=[{value:"API",id:"api",level:2},{value:"Statics",id:"statics",level:3},{value:"Events",id:"events",level:3},{value:"Events for key",id:"events-for-key",level:3},{value:"Methods",id:"methods",level:3},{value:"Example",id:"example",level:2}],s={toc:c},p="wrapper";function d(e){let{components:t,...n}=e;return(0,r.kt)(p,(0,a.Z)({},s,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"Cache data in memory. After ",(0,r.kt)("inlineCode",{parentName:"p"},"cacheTime"),", the data will be automatically deleted."),(0,r.kt)("h2",{id:"api"},"API"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"class MemoryCache<Key = any, Data = any> extends EventEmitter {\n  static DEFAULT_CACHE_TIME: number;\n  static DEFAULT_MAX_CACHE_TIME: number;\n  isReady(): boolean;\n  asReady(): this;\n  getMaxCacheTime(): number;\n  setMaxCacheTime(maxCacheTime: number): this;\n  getDefaultCacheTime(): number;\n  setDefaultCacheTime(defaultCacheTime: number): this;\n  memorize(\n    key: Key,\n    data: Data,\n    options?: { cacheTime?: number; cacheTimestamp?: number }\n  ): this;\n  set(key: Key, data: Data, options?: { cacheTime?: number }): this;\n  has(key: Key): boolean;\n  get(key: Key): Data | undefined;\n  getCacheTime(key: Key): number | undefined;\n  getCacheTimestamp(key: Key): number | undefined;\n  delete(key: Key): this;\n  clear(): this;\n}\n")),(0,r.kt)("h3",{id:"statics"},"Statics"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"strong"},"DEFAULT_CACHE_TIME"),":")," Default cache time, value is ",(0,r.kt)("inlineCode",{parentName:"li"},"300000"),"."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"strong"},"DEFAULT_MAX_CACHE_TIME"),":")," Default max cache time, value is ",(0,r.kt)("inlineCode",{parentName:"li"},"Number.MAX_SAFE_INTEGER"),". When the ",(0,r.kt)("inlineCode",{parentName:"li"},"cacheTime")," is greater than or equals to the max cache time, the delete timer will no be set, which means the cache is permanent.")),(0,r.kt)("h3",{id:"events"},"Events"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"strong"},'memoryCache.on("ready", () => {})'),":")," Ready event. MemoryCache is ready by default and this event will never be emitted. This event is mainly used when you build your own cache constructor which extends MemoryCache."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"strong"},'memoryCache.on("set", (key, data) => {})'),":")," Set cache event."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"strong"},'memoryCache.on("delete", (key, data) => {})'),":")," Delete cache event, including automatically delete."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"strong"},'memoryCache.on("clear", () => {})'),":")," Clear event.")),(0,r.kt)("h3",{id:"events-for-key"},"Events for key"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"strong"},'memoryCache.for(key).on("set", (data) => {})'),":")," Set cache event. The ",(0,r.kt)("inlineCode",{parentName:"li"},"key")," is cache key."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"strong"},'memoryCache.for(key).on("delete", (data) => {})'),":")," Delete cache event. The ",(0,r.kt)("inlineCode",{parentName:"li"},"key")," is cache key.")),(0,r.kt)("h3",{id:"methods"},"Methods"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"strong"},"isReady()"),":")," Returns a boolean value indicates whether the cache is ready."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"strong"},"asReady()"),":")," Make cache ready. If the cache is not ready, ",(0,r.kt)("inlineCode",{parentName:"li"},'"ready"')," event will be emitted."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"strong"},"getMaxCacheTime()"),":")," Get max cache time."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"strong"},"setMaxCacheTime(maxCacheTime)"),":")," Set max cache time."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"strong"},"getDefaultCacheTime()"),":")," Get default cache time."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"strong"},"setDefaultCacheTime(defaultCacheTime)"),":")," Set default cache time."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"strong"},"memorize(key, data[, options])"),":")," Set cache but no events emitted."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"strong"},"set(key, data[, options])"),":")," Set cache and ",(0,r.kt)("inlineCode",{parentName:"li"},'"set"')," events will be emitted."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"strong"},"has(key)"),":")," Detect whether has the cache of the specied key."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"strong"},"get(key)"),":")," Get cache data of the specied key. It may be ",(0,r.kt)("inlineCode",{parentName:"li"},"undefined"),"."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"strong"},"getCacheTime(key)"),":")," Get cache time."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"strong"},"getCacheTimestamp(key)"),":")," Returns the timestamp of the cache\u3002"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"strong"},"delete(key)"),":")," Delete cache manually. Invoking this method will emit ",(0,r.kt)("inlineCode",{parentName:"li"},'"delete"')," events."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"strong"},"clear(key)"),":")," Clear all caches. It will emit ",(0,r.kt)("inlineCode",{parentName:"li"},'"clear"')," event.")),(0,r.kt)("h2",{id:"example"},"Example"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},'import { MemoryCache } from "@lilib/utils";\n\nconst cache = new MemoryCache();\n\ncache.for("user").on("set", () => {\n  // Do something.\n});\n\nfetch("/users/1").then((response) => {\n  cache.memorize("user", response.json());\n});\n\nfetch("/users/1", {\n  method: "POST",\n  body: JSON.stringify({ name: "Vincent" }),\n}).then((response) => {\n  cache.set("user", response.json());\n});\n')))}d.isMDXComponent=!0}}]);